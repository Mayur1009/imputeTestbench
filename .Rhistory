typeof(f)
f[2]
dnew <- parse(text = "1+2")
dnew <- eval(dnew)
dnew
dnew$value
dataIn <- c(1:5)
outs <- c(2:6)
source('~/imputeTestbench/R/PCV.R')
errorParameter <- "source('~/imputeTestbench/R/PCV.R')"
errorParameter[2] <- "source('~/imputeTestbench/R/PCV.R')"
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn, dnew)
newPar
dnew <- 3:7
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn, dnew)
newPar
aaa(dataIn, dnew)
aaa(dataIn, outs)
outs(1:7)
outs <- c(1:7)
aaa(dataIn, outs)
dnew  <- c(2:6)
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn, dnew)
newPar
dataIn
dnew
var(dataIn)
var(dnew)
var(outs)
outs
dnew <- c(6:11)
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn, dnew)
newPar
library(imputeTestbench)
source('~/imputeTestbench/R/PCV.R')
impute_errors(errorParameter = c(4,"source('~/imputeTestbench/R/PCV.R')", "PCV"))
a <- impute_errors(errorParameter = c(4,"source('~/imputeTestbench/R/PCV.R')", "PCV"))
plot_errors(a)
e <- c(4,"xxx",'ccc')
e
e[1]
e[2]
e[1]==4
e[2]==xxx
e[2]=='xxx'
e[2]
errorParameter <- c(4,"","nee")
if(errorParameter[1] == 4)
{
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn, dnew)
gh[i] <- newPar
gh1[i] <- newPar
parameter <- errorParameter[3]
}
source('~/imputeTestbench/R/PCV.R')
errorParameter <- c(4,"source('~/imputeTestbench/R/PCV.R')","nee")
if(errorParameter[1] == 4)
{
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn, dnew)
gh[i] <- newPar
gh1[i] <- newPar
parameter <- errorParameter[3]
}
if(errorParameter[1] == 4)
{
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn, dnew)
ghnew[i] <- newPar
parameter <- errorParameter[3]
}
if(errorParameter[1] == 4)
{
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn, dnew)
ghnew <- newPar
parameter <- errorParameter[3]
}
ghnew
a <- impute_errors(errorParameter = c(4))
a <- impute_errors(errorParameter = c(4,"source('~/imputeTestbench/R/PCV.R')","neer")))
a <- impute_errors(errorParameter = c(4,"source('~/imputeTestbench/R/PCV.R')","neer"))
a
library(imputeTestbench)
a <- impute_errors(errorParameter = c(4,"source('~/imputeTestbench/R/PCV.R')","neer"))
a
a <- impute_errors(errorParameter = c(4,"source('~/imputeTestbench/R/PCV.R')","neer"))
library(imputeTestbench)
a <- impute_errors(errorParameter = c(4,"source('~/imputeTestbench/R/PCV.R')","neer"))
a
library(imputeTestbench)
a <- impute_errors(errorParameter = c(4,"source('~/imputeTestbench/R/PCV.R')","neer"))
a
errorParameter
if(errorParameter == 4)
{ ghjc<- 56}
ghjc
if(errorParameter[1] == 4)
{ ghjc<- 56}
if(errorParameter[1] == 4)
{ ghjc<- 560}
ghjc
library(imputeTestbench)
a <- impute_errors(errorParameter = c(4,"source('~/imputeTestbench/R/PCV.R')","neer"))
dataIn1 <- c(1:6)
d <- c(3:8)
d1 <- c(4:9)
if(errorParameter[1] == 4)
{
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn1, d)
gh[i] <- newPar
newPar <- newPar$value(dataIn1, d1)
gh1[i] <- newPar
parameter <- errorParameter[3]
}
if(errorParameter[1] == 4)
{
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar(dataIn1, d)
gh[i] <- newPar
newPar <- newPar(dataIn1, d1)
gh1[i] <- newPar
parameter <- errorParameter[3]
}
if(errorParameter[1] == 4)
{
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn1, d)
gh[i] <- newPar
newPar <- newPar$value(dataIn1, d1)
gh1[i] <- newPar
parameter <- errorParameter[3]
}
if(errorParameter[1] == 4)
{
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn1, d)
gh[i] <- newPar
newPar <- newPar$value(dataIn1, d1)
gh1[i] <- newPar
parameter <- errorParameter[3]
}
if(errorParameter[1] == 4)
{
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn1, d)
parameter <- errorParameter[3]
}
newPar
parameter
library(imputeTestbench)
if(errorParameter[1] == 4)
{
newPar <- parse(text = errorParameter[2])
newPar <- eval(newPar)
newPar <- newPar$value(dataIn1, d)
parameter <- errorParameter[3]
}
a <- impute_errors(errorParameter = c(4,"source('~/imputeTestbench/R/PCV.R')","neer"))
a
plot_errors(a)
a[]
a[1]
a[2]
a[3]<- NULL
a
a[3]
a$Interpolation <- NULL
a
d <- parameter
d <- "parameter"
a$d
a <- impute_errors(errorParameter = c(4,"source('~/imputeTestbench/R/PCV.R')","neer"))
a$d
a$Parameter
a$Parameter
a
a[1] <- NULL
a
a[1] <- NULL
a
a[1] <- NULL
a
a <- impute_errors(errorParameter = c(4,"source('~/imputeTestbench/R/PCV.R')","neer"))
remove_method <- function(existing_method, method_number)
{
existing_method$[method_number+1] <- NULL
return(existing_method)
}
remove_method <- function(existing_method, method_number)
{
existing_method[method_number+1] <- NULL
return(existing_method)
}
library(devtools)
load_all()
library(imputeTestbench)
library(imputeTestbench)
impute_errors()
a<- impute_errors()
remove_method(a, 1)
library(devtools)
load_all()
library(imputeTestbench)
a<- impute_errors()
a
remove_method(a,2)
a<- impute_errors()
a
remove_method(a,1)
library(imputeTestbench)
a<- impute_errors()
a
remove_method(a,1)
library(imputeTestbench)
library(imputeTestbench)
impute_errors(iris[2])
impute_errors(dataIn = iris[2])
impute_errors()
impute_errors(dataIn = iris[2], missPercentFrom = 10, missPercentTo = 90)
impute_errors(dataIn = iris[2], missPercentFrom = 10, missPercentTo = 90,interval = 5)
impute_errors(dataIn = iris[2], missPercentFrom = 10, missPercentTo = 90,interval = 5,repetition = 10)
impute_errors(dataIn = iris[2], missPercentFrom = 10, missPercentTo = 90,interval = 5,repetition = 5)
impute_errors(dataIn = iris[2], missPercentFrom = 10, missPercentTo = 90,interval = 5,repetition = 1)
dataIn <- c(1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5)
a <- length(dataIn)
b <- a * x
b <- abs(b)
c <- a-b
out <- NULL
a
b
c
c+b
dataIn <- dataIn1
dataIn[c:(c+b)] <- NA
c <- sample(1:a, 1, replace = TRUE)
while(c > a-b)
{
c <- sample(1:a, 1, replace = TRUE)
}
out[i] <- data.frame(dataIn)
out[1]
dataIn <- dataIn1
dataIn[c:(c+b)] <- NA
c <- sample(1:a, 1, replace = TRUE)
while(c > a-b)
{
c <- sample(1:a, 1, replace = TRUE)
}
out[i] <- data.frame(dataIn)
out
dataIn
dataIn <- c(1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5)
a <- length(dataIn)
b <- a * x
b <- abs(b)
c <- a-b
out <- NULL
a
b
c
for(i in 1:repetition)
{
dataIn <- dataIn1
dataIn[c:(c+b)] <- NA
c <- sample(1:a, 1, replace = TRUE)
while(c > a-b)
{
c <- sample(1:a, 1, replace = TRUE)
}
out[i] <- data.frame(dataIn)
}
out
dataIn
dataIn <- c(1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5,1:5)
repetition <- 5
x <- x/100
# Inputs: dataIn, miss_per, repetition
#repetition <- 5      # number of repetition
a <- length(dataIn)
b <- a * x
b <- abs(b)
c <- a-b
out <- NULL
for(i in 1:repetition)
{
dataIn <- dataIn1
dataIn[c:(c+b)] <- NA
c <- sample(1:a, 1, replace = TRUE)
while(c > a-b)
{
c <- sample(1:a, 1, replace = TRUE)
}
out[i] <- data.frame(dataIn)
}
out
library(imputeTestbench)
impute_errors()
library(imputeTestbench)
impute_errors()
library(imputeTestbench)
impute_errors()
library(imputeTestbench)
impute_errors()
x <- 20
x <- x/100
# Inputs: dataIn, miss_per, repetition
#repetition <- 5      # number of repetition
a <- length(dataIn)
b <- a * x
b <- abs(b)
c <- a-b
out <- NULL
dataIn <- dataIn1
dataIn[c:(c+b)] <- NA
c <- sample(1:a, 1, replace = TRUE)
while(c > a-b)
{
c <- sample(1:a, 1, replace = TRUE)
}
out[i] <- data.frame(dataIn)
out
out <- NULL
for(i in 1:repetition)
{
dataIn <- dataIn1
dataIn[c:(c+b)] <- NA
c <- sample(1:a, 1, replace = TRUE)
while(c > a-b)
{
c <- sample(1:a, 1, replace = TRUE)
}
out[i] <- data.frame(dataIn)
}
out
x <- 80
x <- x/100
# Inputs: dataIn, miss_per, repetition
#repetition <- 5      # number of repetition
a <- length(dataIn)
b <- a * x
b <- abs(b)
c <- a-b
out <- NULL
out <- NULL
for(i in 1:repetition)
{
dataIn <- dataIn1
dataIn[c:(c+b)] <- NA
c <- sample(1:a, 1, replace = TRUE)
while(c > a-b)
{
c <- sample(1:a, 1, replace = TRUE)
}
out[i] <- data.frame(dataIn)
}
out
x
x <- 10
x <- x/100
# Inputs: dataIn, miss_per, repetition
#repetition <- 5      # number of repetition
a <- length(dataIn)
b <- a * x
b <- abs(b)
c <- a-b
out <- NULL
out <- NULL
for(i in 1:repetition)
{
dataIn <- dataIn1
dataIn[c:(c+b)] <- NA
c <- sample(1:a, 1, replace = TRUE)
while(c > a-b)
{
c <- sample(1:a, 1, replace = TRUE)
}
out[i] <- data.frame(dataIn)
}
out
dataIn
datax
dataIn <- datax
dataIn
x <- x/100
# Inputs: dataIn, miss_per, repetition
#repetition <- 5      # number of repetition
a <- length(dataIn)
b <- a * x
b <- abs(b)
c <- a-b
out <- NULL
out <- NULL
for(i in 1:repetition)
{
dataIn <- dataIn1
dataIn[c:(c+b)] <- NA
c <- sample(1:a, 1, replace = TRUE)
while(c > a-b)
{
c <- sample(1:a, 1, replace = TRUE)
}
out[i] <- data.frame(dataIn)
}
out
a
b
x
x <- 20
x <- x/100
# Inputs: dataIn, miss_per, repetition
#repetition <- 5      # number of repetition
a <- length(dataIn)
b <- a * x
b <- abs(b)
c <- a-b
a
b
round(b)
b<-round(b)
b
c
c<a-b
c<-a-b
c
c+b
dataIn<-sample(1:10,100,replace = T)
dataIn1
dataIn1<- dataIn
x <- 20
a <- length(dataIn)
a
b <- a * x
b <- round(b)
c <- a-b
b
c
x <- 20
x <- x/100
# Inputs: dataIn, miss_per, repetition
#repetition <- 5      # number of repetition
a <- length(dataIn)
b <- a * x
b <- round(b)
c <- a-b
out <- NULL
a
b
c
library(imputeTestbench)
impute_errors()
library(imputeTestbench)
impute_errors()
impute_errors()
impute_errors()
impute_errors(missPercentFrom = 10,missPercentTo = 50)
impute_errors(missPercentFrom = 80,missPercentTo = 50)
impute_errors(missPercentFrom = 80,missPercentTo = 90)
impute_errors(missPercentFrom = 20,missPercentTo = 90)
impute_errors(missPercentFrom = 30,missPercentTo = 90)
impute_errors(missPercentFrom = 40,missPercentTo = 90)
impute_errors(missPercentFrom = 50,missPercentTo = 90)
impute_errors(missPercentFrom = 50,missPercentTo = 90)
impute_errors(missPercentFrom = 50,missPercentTo = 90)
impute_errors(missPercentFrom = 60,missPercentTo = 90)
impute_errors(missPercentFrom = 10,missPercentTo = 90)
library(imputePSF)
a <- impute_errors(missPercentFrom = 10,missPercentTo = 90)
b <- missing_patch(a)
a
b <- missing_patch(a)
b <- missing_patch(as.numeric(a))
a
as.numeric(a)
unlist(a)
b <- missing_patch(unlist(a))
b
heal_data(b)
heal_data(a,b)
heal_data(a,unlist(b))
heal_data(unlist(a),b)
library(imputePSF)
heal_data(unlist(a),b)
remove(imputePSF)
library(imputePSF)
heal_data(unlist(a),b)
a
b
a <- unlist(a)
heal_data(a,b)
x <- 10
library(imputeTestbench)
